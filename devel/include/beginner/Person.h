// Generated by gencpp from file beginner/Person.msg
// DO NOT EDIT!


#ifndef BEGINNER_MESSAGE_PERSON_H
#define BEGINNER_MESSAGE_PERSON_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace beginner
{
template <class ContainerAllocator>
struct Person_
{
  typedef Person_<ContainerAllocator> Type;

  Person_()
    : header()
    , user_id()
    , direction(0.0)
    , velocity(0.0)
    , acc(0.0)
    , threshold_upper(0.0)
    , threshold_low(0.0)
    , avg(0.0)
    , signal(0.0)
    , state(0)
    , LCSS_state(0)  {
    }
  Person_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , user_id(_alloc)
    , direction(0.0)
    , velocity(0.0)
    , acc(0.0)
    , threshold_upper(0.0)
    , threshold_low(0.0)
    , avg(0.0)
    , signal(0.0)
    , state(0)
    , LCSS_state(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _user_id_type;
  _user_id_type user_id;

   typedef double _direction_type;
  _direction_type direction;

   typedef double _velocity_type;
  _velocity_type velocity;

   typedef double _acc_type;
  _acc_type acc;

   typedef double _threshold_upper_type;
  _threshold_upper_type threshold_upper;

   typedef double _threshold_low_type;
  _threshold_low_type threshold_low;

   typedef double _avg_type;
  _avg_type avg;

   typedef double _signal_type;
  _signal_type signal;

   typedef int64_t _state_type;
  _state_type state;

   typedef int64_t _LCSS_state_type;
  _LCSS_state_type LCSS_state;





  typedef boost::shared_ptr< ::beginner::Person_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::beginner::Person_<ContainerAllocator> const> ConstPtr;

}; // struct Person_

typedef ::beginner::Person_<std::allocator<void> > Person;

typedef boost::shared_ptr< ::beginner::Person > PersonPtr;
typedef boost::shared_ptr< ::beginner::Person const> PersonConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::beginner::Person_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::beginner::Person_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace beginner

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'beginner': ['/home/pmcn/Documents/pmcn_ws/src/beginner/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::beginner::Person_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::beginner::Person_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::beginner::Person_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::beginner::Person_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::beginner::Person_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::beginner::Person_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::beginner::Person_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9d6531b7d7f85370791373555eb7b8ed";
  }

  static const char* value(const ::beginner::Person_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9d6531b7d7f85370ULL;
  static const uint64_t static_value2 = 0x791373555eb7b8edULL;
};

template<class ContainerAllocator>
struct DataType< ::beginner::Person_<ContainerAllocator> >
{
  static const char* value()
  {
    return "beginner/Person";
  }

  static const char* value(const ::beginner::Person_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::beginner::Person_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n\
\n\
##string user_id\n\
##float64 direction\n\
##float64 velocity\n\
\n\
string user_id\n\
float64 direction\n\
float64 velocity\n\
float64 acc\n\
float64 threshold_upper\n\
float64 threshold_low\n\
float64 avg\n\
float64 signal\n\
int64 state\n\
int64 LCSS_state\n\
\n\
##int64 Imu_state\n\
##int64 Lidar_state\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::beginner::Person_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::beginner::Person_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.user_id);
      stream.next(m.direction);
      stream.next(m.velocity);
      stream.next(m.acc);
      stream.next(m.threshold_upper);
      stream.next(m.threshold_low);
      stream.next(m.avg);
      stream.next(m.signal);
      stream.next(m.state);
      stream.next(m.LCSS_state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Person_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::beginner::Person_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::beginner::Person_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "user_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.user_id);
    s << indent << "direction: ";
    Printer<double>::stream(s, indent + "  ", v.direction);
    s << indent << "velocity: ";
    Printer<double>::stream(s, indent + "  ", v.velocity);
    s << indent << "acc: ";
    Printer<double>::stream(s, indent + "  ", v.acc);
    s << indent << "threshold_upper: ";
    Printer<double>::stream(s, indent + "  ", v.threshold_upper);
    s << indent << "threshold_low: ";
    Printer<double>::stream(s, indent + "  ", v.threshold_low);
    s << indent << "avg: ";
    Printer<double>::stream(s, indent + "  ", v.avg);
    s << indent << "signal: ";
    Printer<double>::stream(s, indent + "  ", v.signal);
    s << indent << "state: ";
    Printer<int64_t>::stream(s, indent + "  ", v.state);
    s << indent << "LCSS_state: ";
    Printer<int64_t>::stream(s, indent + "  ", v.LCSS_state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BEGINNER_MESSAGE_PERSON_H
