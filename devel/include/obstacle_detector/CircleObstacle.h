// Generated by gencpp from file obstacle_detector/CircleObstacle.msg
// DO NOT EDIT!


#ifndef OBSTACLE_DETECTOR_MESSAGE_CIRCLEOBSTACLE_H
#define OBSTACLE_DETECTOR_MESSAGE_CIRCLEOBSTACLE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Vector3.h>

namespace obstacle_detector
{
template <class ContainerAllocator>
struct CircleObstacle_
{
  typedef CircleObstacle_<ContainerAllocator> Type;

  CircleObstacle_()
    : center()
    , velocity()
    , radius(0.0)
    , true_radius(0.0)
    , id()
    , direction(0.0)
    , state(0)
    , LCSS_state(0)
    , distance(0)
    , action()
    , state_list()
    , direction_list()
    , prev_direction(0)  {
    }
  CircleObstacle_(const ContainerAllocator& _alloc)
    : center(_alloc)
    , velocity(_alloc)
    , radius(0.0)
    , true_radius(0.0)
    , id(_alloc)
    , direction(0.0)
    , state(0)
    , LCSS_state(0)
    , distance(0)
    , action(_alloc)
    , state_list(_alloc)
    , direction_list(_alloc)
    , prev_direction(0)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _center_type;
  _center_type center;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _velocity_type;
  _velocity_type velocity;

   typedef double _radius_type;
  _radius_type radius;

   typedef double _true_radius_type;
  _true_radius_type true_radius;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _id_type;
  _id_type id;

   typedef double _direction_type;
  _direction_type direction;

   typedef int64_t _state_type;
  _state_type state;

   typedef int64_t _LCSS_state_type;
  _LCSS_state_type LCSS_state;

   typedef int64_t _distance_type;
  _distance_type distance;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _action_type;
  _action_type action;

   typedef std::vector<int64_t, typename ContainerAllocator::template rebind<int64_t>::other >  _state_list_type;
  _state_list_type state_list;

   typedef std::vector<int64_t, typename ContainerAllocator::template rebind<int64_t>::other >  _direction_list_type;
  _direction_list_type direction_list;

   typedef int64_t _prev_direction_type;
  _prev_direction_type prev_direction;





  typedef boost::shared_ptr< ::obstacle_detector::CircleObstacle_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::obstacle_detector::CircleObstacle_<ContainerAllocator> const> ConstPtr;

}; // struct CircleObstacle_

typedef ::obstacle_detector::CircleObstacle_<std::allocator<void> > CircleObstacle;

typedef boost::shared_ptr< ::obstacle_detector::CircleObstacle > CircleObstaclePtr;
typedef boost::shared_ptr< ::obstacle_detector::CircleObstacle const> CircleObstacleConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::obstacle_detector::CircleObstacle_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::obstacle_detector::CircleObstacle_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace obstacle_detector

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'obstacle_detector': ['/home/pmcn/Documents/pmcn_ws/src/obstacle_detector/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::obstacle_detector::CircleObstacle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::obstacle_detector::CircleObstacle_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::obstacle_detector::CircleObstacle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::obstacle_detector::CircleObstacle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::obstacle_detector::CircleObstacle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::obstacle_detector::CircleObstacle_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::obstacle_detector::CircleObstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ee86047c4d5777f2884d730ab57547d9";
  }

  static const char* value(const ::obstacle_detector::CircleObstacle_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xee86047c4d5777f2ULL;
  static const uint64_t static_value2 = 0x884d730ab57547d9ULL;
};

template<class ContainerAllocator>
struct DataType< ::obstacle_detector::CircleObstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "obstacle_detector/CircleObstacle";
  }

  static const char* value(const ::obstacle_detector::CircleObstacle_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::obstacle_detector::CircleObstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Point center      # Central point [m]\n\
geometry_msgs/Vector3 velocity  # Linear velocity [m/s]\n\
float64 radius                  # Radius with added margin [m]\n\
float64 true_radius             # True measured radius [m]\n\
string id\n\
float64 direction\n\
\n\
int64 state\n\
int64 LCSS_state\n\
int64 distance\n\
string action\n\
int64[] state_list\n\
int64[] direction_list\n\
int64 prev_direction\n\
##int32 possibility\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::obstacle_detector::CircleObstacle_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::obstacle_detector::CircleObstacle_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.center);
      stream.next(m.velocity);
      stream.next(m.radius);
      stream.next(m.true_radius);
      stream.next(m.id);
      stream.next(m.direction);
      stream.next(m.state);
      stream.next(m.LCSS_state);
      stream.next(m.distance);
      stream.next(m.action);
      stream.next(m.state_list);
      stream.next(m.direction_list);
      stream.next(m.prev_direction);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CircleObstacle_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::obstacle_detector::CircleObstacle_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::obstacle_detector::CircleObstacle_<ContainerAllocator>& v)
  {
    s << indent << "center: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.center);
    s << indent << "velocity: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.velocity);
    s << indent << "radius: ";
    Printer<double>::stream(s, indent + "  ", v.radius);
    s << indent << "true_radius: ";
    Printer<double>::stream(s, indent + "  ", v.true_radius);
    s << indent << "id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.id);
    s << indent << "direction: ";
    Printer<double>::stream(s, indent + "  ", v.direction);
    s << indent << "state: ";
    Printer<int64_t>::stream(s, indent + "  ", v.state);
    s << indent << "LCSS_state: ";
    Printer<int64_t>::stream(s, indent + "  ", v.LCSS_state);
    s << indent << "distance: ";
    Printer<int64_t>::stream(s, indent + "  ", v.distance);
    s << indent << "action: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.action);
    s << indent << "state_list[]" << std::endl;
    for (size_t i = 0; i < v.state_list.size(); ++i)
    {
      s << indent << "  state_list[" << i << "]: ";
      Printer<int64_t>::stream(s, indent + "  ", v.state_list[i]);
    }
    s << indent << "direction_list[]" << std::endl;
    for (size_t i = 0; i < v.direction_list.size(); ++i)
    {
      s << indent << "  direction_list[" << i << "]: ";
      Printer<int64_t>::stream(s, indent + "  ", v.direction_list[i]);
    }
    s << indent << "prev_direction: ";
    Printer<int64_t>::stream(s, indent + "  ", v.prev_direction);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OBSTACLE_DETECTOR_MESSAGE_CIRCLEOBSTACLE_H
